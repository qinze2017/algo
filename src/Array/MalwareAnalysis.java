package Array;

import java.util.Arrays;

/**
 * @program: java_algo
 * @description: Your company is analyzing malware which targets numerical record files. The malware uses a sliding window over the array of numbers in a file, and tries to match the following parrtern: T,-,-,X,-,-,-,T where the position 'X' is compared to each postion'T'.The window is moved so 'X' passes through all the values. The malware has the following rules: if any of the 'T' positions in the pattern are bigger or equal to 'X' the malware replaces 'X' with 0. if the 'X'postion in the parrtern is near the left or right border and is missing a 'T' position neighbor, only the other side is considered. The malware finds all the positions first and only then sets them to 0.  For example, if the values in a record file are the following: {1,2,0,5,0,2,4,3,3,3} The expected values after the malware runs ares: {1,0,0,5,0,0,0,3,3,0} In this example, number 4 was set to 0 because 5 is bigger number. Implement the simulate function so that the malware behavior is replicated for future study.
 * @author: Ze QIN
 * @create: 2023-10-22 18:45
 **/
public class MalwareAnalysis {
    public static int[] simulate(int[] entries) {
        //patterns T,-,-,X,-,-,-,T

        int l = entries.length;
        int i = 0, T1 = 0, X = 0, T2 = 0;

        while (i < l) {
            if (i+7 < l) {
                T2 = i + 7;
            } else if (i+3 < l){
                T2 = -1;
            } else {
                T1 = -1;
            }
            setPosition(entries, i, i+3, T2);
            i++;
        }

        return entries;
    }

    public static int[] setPosition(int[] entries, int T1, int X, int T2) {

        if (T1 != -1 && entries[T1] >= X || T2 != -1 && entries[T2] >= X) {
            entries[X] = 0;
        }

        return entries;
    }

    public static void main(String[] args) {
        int[] records = { 1, 2, 0, 5, 0, 2, 4, 3, 3, 3 };
        System.out.println(Arrays.toString(simulate(records)));
        // Expected output:
        // 1, 0, 0, 5, 0, 0, 0, 3, 3, 0
    }
}
